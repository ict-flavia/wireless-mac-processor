/*
 * wmp_parameters.h
 *
 *  Created on: Oct 7, 2013
 *      Author: Nicolo' Facchi
 */

#ifndef WMP_PARAMETER_H_
#define WMP_PARAMETER_H_

#include "xil_types.h"
#include "wmp_sw_reg.h"

#define WMP_PARAMETER_MAX_INDEX			0xFF
#define WMP_PARAMETER_LUT_SIZE			(WMP_PARAMETER_MAX_INDEX + 1)

#define WMP_PARAMETER_SUCCESS			1
#define WMP_PARAMETER_FAIL				0

/* put here parameter indexes definitions
 *
 * Example: #define PARAM_STATE_MACHINE_START_INDEX		0
 */
#define WMP_PARAMETER_DUMMY_INDEX					0xFF
#define WMP_PARAMETER_BACKOFF_INDEX					0x01
#define WMP_PARAMETER_PRM_2_INDEX					0x02
#define WMP_PARAMETER_PRM_4_INDEX					0x03
#define WMP_PARAMETER_PRM_5_INDEX					0x06
#define WMP_PARAMETER_TIMER_0_0_INDEX				0x09
#define WMP_PARAMETER_TIMER_0_1_INDEX				0x0B
#define WMP_PARAMETER_TIMER_1_0_INDEX				0x0D
#define WMP_PARAMETER_TIMER_1_1_INDEX				0x0F
#define WMP_PARAMETER_PRM_16_INDEX					0x13
#define WMP_PARAMETER_PRM_17_INDEX					0x14
#define WMP_PARAMETER_PRM_3_INDEX					0x15
#define WMP_PARAMETER_TIME_LOST_INDEX				0x16
#define WMP_PARAMETER_SET_VALUE_INDEX				0x1F
#define WMP_PARAMETER_CHECK_VALUE_INDEX				0x20
#define WMP_PARAMETER_POSITION_INDEX				0x21
#define WMP_PARAMETER_STATE_MACHINE_START_INDEX		0x00

#define WMP_PARAMETER_BACKOFF_MASK						0xFFFF

#define WMP_PARAMETER_BACKOFF_STANDARD_VALUE			0xFFFF
#define WMP_PARAMETER_BACKOFF_IS_STANDARD(p)				\
	(((u16)((p) & WMP_PARAMETER_BACKOFF_MASK)) == 			\
			WMP_PARAMETER_BACKOFF_STANDARD_VALUE)

#define WMP_PARAMETER_BACKOFF_IMMEDIATE_VALUE			0xFF0F
#define WMP_PARAMETER_BACKOFF_IS_IMMEDIATE(p)				\
	(((u16)((p) & WMP_PARAMETER_BACKOFF_MASK)) == 			\
			WMP_PARAMETER_BACKOFF_IMMEDIATE_VALUE)

#define WMP_PARAMETER_BACKOFF_VALUE						0xFF00
#define WMP_PARAMETER_BACKOFF_IS_VALUE(p)					\
	(((u16)((p) & WMP_PARAMETER_BACKOFF_MASK)) == 			\
			WMP_PARAMETER_BACKOFF_VALUE)

#define WMP_PARAMETER_BACKOFF_STANDARD_BRCM_COMP_VALUE	0x000F
#define WMP_PARAMETER_BACKOFF_IS_STANDARD_BRCM_COMP(p)		\
	(((u16)((p) & WMP_PARAMETER_BACKOFF_MASK)) == 			\
			WMP_PARAMETER_BACKOFF_STANDARD_BRCM_COMP_VALUE)

#define WMP_PARAMETER_BACKOFF_PIFS_BRCM_COMP_VALUE		0x000E
#define WMP_PARAMETER_BACKOFF_IS_PIFS_BRCM_COMP(p)			\
	(((u16)((p) & WMP_PARAMETER_BACKOFF_MASK)) == 			\
			WMP_PARAMETER_BACKOFF_PIFS_BRCM_COMP_VALUE)

#define WMP_PARAMETER_BACKOFF_SIFS_BRCM_COMP_VALUE		0x000D
#define WMP_PARAMETER_BACKOFF_IS_SIFS_BRCM_COMP(p)			\
	(((u16)((p) & WMP_PARAMETER_BACKOFF_MASK)) == 			\
			WMP_PARAMETER_BACKOFF_SIFS_BRCM_COMP_VALUE)

#define WMP_PARAMETER_BACKOFF_TDM_VALUE					0x000C
#define WMP_PARAMETER_BACKOFF_IS_TDM(p)						\
	(((u16)((p) & WMP_PARAMETER_BACKOFF_MASK)) == 			\
			WMP_PARAMETER_BACKOFF_TDM_VALUE)

#define WMP_PARAMETER_BACKOFF_VALUE_MASK				0x00FF
#define WMP_PARAMETER_BACKOFF_GET_VALUE(p)					\
	((u16)((p) & WMP_PARAMETER_BACKOFF_VALUE_MASK))

struct wmp_parameter {
	/* parameter index */
	const u8 id;
	/* Set the value of the parameter.
	 * Return WMP_PARAMETER_SUCCESS or WMP_PARAMETER_FAIL
	 */
	int (*const set)(void *val, struct wmp_sw_reg *);
	/* set *val to the value of the parameter.
	 * Return WMP_PARAMETER_SUCCESS or WMP_PARAMETER_FAIL
	 */
	int (*const get)(void *val, struct wmp_sw_reg *);
};

extern const struct wmp_parameter wmp_parameter_lut[WMP_PARAMETER_LUT_SIZE];

#endif /* WMP_PARAMETERS_H_ */
